"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmazonLinux2023ImageSsmParameter = exports.AmazonLinux2023Kernel = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("./common");
/**
 * Amazon Linux 2023 kernel versions
 */
class AmazonLinux2023Kernel {
    constructor(version) {
        this.version = version;
    }
    /**
     * Generate a string representation of the kernel
     */
    toString() {
        return `kernel-${this.version}`;
    }
}
_a = JSII_RTTI_SYMBOL_1;
AmazonLinux2023Kernel[_a] = { fqn: "aws-cdk-lib.aws_ec2.AmazonLinux2023Kernel", version: "2.77.0" };
/**
 * The latest kernel version currently available in a published AMI.
 *
 * When a new kernel version is available for an al2023 AMI this will be
 * updated to contain the latest kernel version and will cause your instances
 * to be replaced. Do not store stateful information on the instance if you are
 * using this version.
 */
AmazonLinux2023Kernel.CDK_LATEST = new AmazonLinux2023Kernel('6.1');
/**
 * The default kernel version for Amazon Linux 2023 is 6.1 and
 * the SSM parameter does not include it in the name
 * (i.e. /aws/service/ami-amazon-linux-latest/amzn2023-ami-kernel-default-x86_64)
 */
AmazonLinux2023Kernel.DEFAULT = new AmazonLinux2023Kernel('default');
/**
 * Kernel version 6.1
 */
AmazonLinux2023Kernel.KERNEL_6_1 = new AmazonLinux2023Kernel('6.1');
exports.AmazonLinux2023Kernel = AmazonLinux2023Kernel;
/**
 * A SSM Parameter that contains the AMI ID for Amazon Linux 2023
 */
class AmazonLinux2023ImageSsmParameter extends common_1.AmazonLinuxImageSsmParameterBase {
    /**
     * Generates a SSM Parameter name for a specific amazon linux 2022 AMI
     *
     * Example values:
     *
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-6.1-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-6.1-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64",
     */
    static ssmParameterName(props) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinux2023ImageSsmParameterProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.ssmParameterName);
            }
            throw error;
        }
        const edition = (props && props.edition) || common_1.AmazonLinuxEdition.STANDARD;
        const parts = [
            common_1.AmazonLinuxGeneration.AMAZON_LINUX_2023,
            'ami',
            edition !== common_1.AmazonLinuxEdition.STANDARD ? edition : undefined,
            (props.kernel ?? AmazonLinux2023Kernel.DEFAULT)?.toString(),
            props.cpuType ?? common_1.AmazonLinuxCpuType.X86_64,
        ].filter(x => !!x);
        return '/aws/service/ami-amazon-linux-latest/' + parts.join('-');
    }
    constructor(props = {}) {
        super({
            parameterName: AmazonLinux2023ImageSsmParameter.ssmParameterName(props),
            cachedInContext: props.cachedInContext,
            userData: props.userData,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinux2023ImageSsmParameterProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, AmazonLinux2023ImageSsmParameter);
            }
            throw error;
        }
    }
}
_b = JSII_RTTI_SYMBOL_1;
AmazonLinux2023ImageSsmParameter[_b] = { fqn: "aws-cdk-lib.aws_ec2.AmazonLinux2023ImageSsmParameter", version: "2.77.0" };
exports.AmazonLinux2023ImageSsmParameter = AmazonLinux2023ImageSsmParameter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hem9uLWxpbnV4LTIwMjMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhbWF6b24tbGludXgtMjAyMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQ0FBc0s7QUFFdEs7O0dBRUc7QUFDSCxNQUFhLHFCQUFxQjtJQXNCaEMsWUFBNkIsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7S0FBSztJQUVqRDs7T0FFRztJQUNJLFFBQVE7UUFDYixPQUFPLFVBQVUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2pDOzs7O0FBNUJEOzs7Ozs7O0dBT0c7QUFDb0IsZ0NBQVUsR0FBRyxJQUFJLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXJFOzs7O0dBSUc7QUFDb0IsNkJBQU8sR0FBRyxJQUFJLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXRFOztHQUVHO0FBQ29CLGdDQUFVLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQXJCMUQsc0RBQXFCO0FBNkNsQzs7R0FFRztBQUNILE1BQWEsZ0NBQWlDLFNBQVEseUNBQWdDO0lBQ3BGOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBNEM7Ozs7Ozs7Ozs7UUFDekUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDJCQUFrQixDQUFDLFFBQVEsQ0FBQztRQUV4RSxNQUFNLEtBQUssR0FBNEI7WUFDckMsOEJBQXFCLENBQUMsaUJBQWlCO1lBQ3ZDLEtBQUs7WUFDTCxPQUFPLEtBQUssMkJBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDN0QsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRTtZQUMzRCxLQUFLLENBQUMsT0FBTyxJQUFJLDJCQUFrQixDQUFDLE1BQU07U0FDM0MsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkIsT0FBTyx1Q0FBdUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsWUFBWSxRQUErQyxFQUFFO1FBQzNELEtBQUssQ0FBQztZQUNKLGFBQWEsRUFBRSxnQ0FBZ0MsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7WUFDdkUsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUN6QixDQUFDLENBQUM7Ozs7OzsrQ0FsQ00sZ0NBQWdDOzs7O0tBbUMxQzs7OztBQW5DVSw0RUFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbWF6b25MaW51eENwdVR5cGUsIEFtYXpvbkxpbnV4RWRpdGlvbiwgQW1hem9uTGludXhHZW5lcmF0aW9uLCBBbWF6b25MaW51eEltYWdlU3NtUGFyYW1ldGVyQ29tbW9uT3B0aW9ucywgQW1hem9uTGludXhJbWFnZVNzbVBhcmFtZXRlckJhc2UgfSBmcm9tICcuL2NvbW1vbic7XG5cbi8qKlxuICogQW1hem9uIExpbnV4IDIwMjMga2VybmVsIHZlcnNpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBBbWF6b25MaW51eDIwMjNLZXJuZWwge1xuICAvKipcbiAgICogVGhlIGxhdGVzdCBrZXJuZWwgdmVyc2lvbiBjdXJyZW50bHkgYXZhaWxhYmxlIGluIGEgcHVibGlzaGVkIEFNSS5cbiAgICpcbiAgICogV2hlbiBhIG5ldyBrZXJuZWwgdmVyc2lvbiBpcyBhdmFpbGFibGUgZm9yIGFuIGFsMjAyMyBBTUkgdGhpcyB3aWxsIGJlXG4gICAqIHVwZGF0ZWQgdG8gY29udGFpbiB0aGUgbGF0ZXN0IGtlcm5lbCB2ZXJzaW9uIGFuZCB3aWxsIGNhdXNlIHlvdXIgaW5zdGFuY2VzXG4gICAqIHRvIGJlIHJlcGxhY2VkLiBEbyBub3Qgc3RvcmUgc3RhdGVmdWwgaW5mb3JtYXRpb24gb24gdGhlIGluc3RhbmNlIGlmIHlvdSBhcmVcbiAgICogdXNpbmcgdGhpcyB2ZXJzaW9uLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDREtfTEFURVNUID0gbmV3IEFtYXpvbkxpbnV4MjAyM0tlcm5lbCgnNi4xJyk7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGtlcm5lbCB2ZXJzaW9uIGZvciBBbWF6b24gTGludXggMjAyMyBpcyA2LjEgYW5kXG4gICAqIHRoZSBTU00gcGFyYW1ldGVyIGRvZXMgbm90IGluY2x1ZGUgaXQgaW4gdGhlIG5hbWVcbiAgICogKGkuZS4gL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2Ftem4yMDIzLWFtaS1rZXJuZWwtZGVmYXVsdC14ODZfNjQpXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERFRkFVTFQgPSBuZXcgQW1hem9uTGludXgyMDIzS2VybmVsKCdkZWZhdWx0Jyk7XG5cbiAgLyoqXG4gICAqIEtlcm5lbCB2ZXJzaW9uIDYuMVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBLRVJORUxfNl8xID0gbmV3IEFtYXpvbkxpbnV4MjAyM0tlcm5lbCgnNi4xJyk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgdmVyc2lvbjogc3RyaW5nKSB7IH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGtlcm5lbFxuICAgKi9cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBrZXJuZWwtJHt0aGlzLnZlcnNpb259YDtcbiAgfVxufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgc3BlY2lmaWMgdG8gYWwyMDIzIGltYWdlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFtYXpvbkxpbnV4MjAyM0ltYWdlU3NtUGFyYW1ldGVyUHJvcHMgZXh0ZW5kcyBBbWF6b25MaW51eEltYWdlU3NtUGFyYW1ldGVyQ29tbW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBXaGF0IGtlcm5lbCB2ZXJzaW9uIG9mIEFtYXpvbiBMaW51eCB0byB1c2VcbiAgICpcbiAgICogQGRlZmF1bHQgQW1hem9uTGludXgyMDIzS2VybmVsLkRFRkFVTFRcbiAgICovXG4gIHJlYWRvbmx5IGtlcm5lbD86IEFtYXpvbkxpbnV4MjAyM0tlcm5lbDtcbn1cblxuXG4vKipcbiAqIEEgU1NNIFBhcmFtZXRlciB0aGF0IGNvbnRhaW5zIHRoZSBBTUkgSUQgZm9yIEFtYXpvbiBMaW51eCAyMDIzXG4gKi9cbmV4cG9ydCBjbGFzcyBBbWF6b25MaW51eDIwMjNJbWFnZVNzbVBhcmFtZXRlciBleHRlbmRzIEFtYXpvbkxpbnV4SW1hZ2VTc21QYXJhbWV0ZXJCYXNlIHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFNTTSBQYXJhbWV0ZXIgbmFtZSBmb3IgYSBzcGVjaWZpYyBhbWF6b24gbGludXggMjAyMiBBTUlcbiAgICpcbiAgICogRXhhbXBsZSB2YWx1ZXM6XG4gICAqXG4gICAqICAgICBcIi9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbDIwMjMtYW1pLWtlcm5lbC02LjEtYXJtNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMy1hbWkta2VybmVsLTYuMS14ODZfNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMy1hbWktbWluaW1hbC1rZXJuZWwtNi4xLWFybTY0XCIsXG4gICAqICAgICBcIi9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbDIwMjMtYW1pLW1pbmltYWwta2VybmVsLTYuMS14ODZfNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMy1hbWktbWluaW1hbC1rZXJuZWwtZGVmYXVsdC1hcm02NFwiLFxuICAgKiAgICAgXCIvYXdzL3NlcnZpY2UvYW1pLWFtYXpvbi1saW51eC1sYXRlc3QvYWwyMDIzLWFtaS1rZXJuZWwtZGVmYXVsdC14ODZfNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMy1hbWktbWluaW1hbC1rZXJuZWwtZGVmYXVsdC14ODZfNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMy1hbWkta2VybmVsLWRlZmF1bHQtYXJtNjRcIixcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3NtUGFyYW1ldGVyTmFtZShwcm9wczogQW1hem9uTGludXgyMDIzSW1hZ2VTc21QYXJhbWV0ZXJQcm9wcyk6IHN0cmluZyB7XG4gICAgY29uc3QgZWRpdGlvbiA9IChwcm9wcyAmJiBwcm9wcy5lZGl0aW9uKSB8fCBBbWF6b25MaW51eEVkaXRpb24uU1RBTkRBUkQ7XG5cbiAgICBjb25zdCBwYXJ0czogQXJyYXk8c3RyaW5nfHVuZGVmaW5lZD4gPSBbXG4gICAgICBBbWF6b25MaW51eEdlbmVyYXRpb24uQU1BWk9OX0xJTlVYXzIwMjMsXG4gICAgICAnYW1pJyxcbiAgICAgIGVkaXRpb24gIT09IEFtYXpvbkxpbnV4RWRpdGlvbi5TVEFOREFSRCA/IGVkaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICAocHJvcHMua2VybmVsID8/IEFtYXpvbkxpbnV4MjAyM0tlcm5lbC5ERUZBVUxUKT8udG9TdHJpbmcoKSxcbiAgICAgIHByb3BzLmNwdVR5cGUgPz8gQW1hem9uTGludXhDcHVUeXBlLlg4Nl82NCxcbiAgICBdLmZpbHRlcih4ID0+ICEheCk7XG5cbiAgICByZXR1cm4gJy9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC8nICsgcGFydHMuam9pbignLScpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IEFtYXpvbkxpbnV4MjAyM0ltYWdlU3NtUGFyYW1ldGVyUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHtcbiAgICAgIHBhcmFtZXRlck5hbWU6IEFtYXpvbkxpbnV4MjAyM0ltYWdlU3NtUGFyYW1ldGVyLnNzbVBhcmFtZXRlck5hbWUocHJvcHMpLFxuICAgICAgY2FjaGVkSW5Db250ZXh0OiBwcm9wcy5jYWNoZWRJbkNvbnRleHQsXG4gICAgICB1c2VyRGF0YTogcHJvcHMudXNlckRhdGEsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==